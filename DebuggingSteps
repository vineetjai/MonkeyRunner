 INSTALL ANDROID STUDIO
 
Download Android Studio for linux in zip format from https://developer.android.com/studio/index.html
Open Terminal where Android Studio is downloaded .
Unzip Android studio by using command “unzip file.zip -d destination_folder_path” (if unzip is not installed then install it using sudo apt-get install unzip)
If you are using the 64-bit version of Ubuntu, you need to install several 32-bit libraries with the command  “sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6”
To run Android Studio .Open terminal in android-studio/bin and run  ./studio.sh
Export path of  Android SDK in bashrc file . In terminal type “nano ~/.bashrc” and in bashrc file append 
             export ANDROID_HOME=$HOME/Android/Sdk
             export PATH=$PATH:$ANDROID_HOME/tools
 
INSTALL AND CONFIGURE AVD 
In Android Studio goto Tools => Android => AVD manager => Create Virtual Device 
Choose Virtual Device and download it . Click on next button . Change Advanced Settings according to your device
For configuration goto   AVD Tools => Edit Configurations => Application
In Deployment Target options choose emulator and in Prefer virtual Android Device choose Device which was created in Step 1 
 
RUNNING MONKEY
MonkeyRunner Tool to test app UI and functionality. pseudo-random streams of user events and system events is generated by MonkeyRunner. MonkeyRunner controls the workstation by sending commands and events.
You can use the Monkey to stress-test applications that you are developing.
MonkeyRunner has command line tool which can run and test over emulator or device.
 
The basic syntax of MonkeyRunner is :-” adb shell monkey [options] <event-count> ”
 
Run application in emulator
Type “adb devices” in Terminal to see if AVD is connected with adb or not .
Some Monkey Commands are:-   
            “adb shell monkey -p com.abc -v 10000 > monkey_report.txt” . 
com.abc => package name , Number  of events injected monkey will click 10000 times randomly on app, monkey_report.txt =>  report file can be found in platform tools(can also give  actual path of file )
            “adb shell monkey --kill-process-after-error -p com.ABC -v 5000 > ABC.txt ”.
--kill-process-after-error => will kill monkey after any crash and generate report.
            “adb shell monkey --ignore-timeouts -p com.ABC -v 5000 > XYZ.txt”
--ignore-timeouts => will ignore timeouts and hit application continously
 
 
Source :-
https://youtu.be/rHDTZmGChh
https://developer.android.com/studio/test/monkey.html
https://stuff.mit.edu/afs/sipb/project/android/docs/tools/help/monkey.html
https://developer.android.com/studio/command-line/adb.html
MONKEYRUNNER
The monkeyrunner tool provides an API for writing programs that control an Android device or emulator from outside of Android code. With monkeyrunner, you can write a Python program that installs an Android application or test package, runs it, sends keystrokes to it, takes screenshots of its user interface, and stores screenshots on the workstation. The monkeyrunner tool is primarily designed to test applications and devices at the functional/framework level and for running unit test suites, but you are free to use it for other purposes.
https://developer.android.com/studio/test/monkeyrunner/index.html
https://www.youtube.com/watch?v=83DV74TwOiY
Simple monkeyrunner program:-
 
# Imports the monkeyrunner modules used by this program
from com.android.monkeyrunner import MonkeyRunner, MonkeyDevice
 # Connects to the current device, returning a MonkeyDevice object
device = MonkeyRunner.waitForConnection()
 # Installs the Android package. Notice that this method returns a boolean, so you can test
# to see if the installation worked.
device.installPackage('myproject/bin/MyApplication.apk')
 # sets a variable with the package's internal name
package = 'com.example.android.myapplication'
 # sets a variable with the name of an Activity in the package
activity = 'com.example.android.myapplication.MainActivity'
 # sets the name of the component to start
runComponent = package + '/' + activity
 # Runs the component
device.startActivity(component= runComponent )
 # Presses the Menu button
device.press('KEYCODE_MENU', MonkeyDevice.DOWN_AND_UP)
 # Takes a screenshot
result = device.takeSnapshot()
 # Writes the screenshot to a file
result.writeToFile('myproject/shot1.png','png')
 
 
Save above script file as monkey.py
Open a terminal and go to folder where monkeyrunner file is present( most probably in  /home/usr/Android/Sdk/tools/bin) and type “./monkeyrunner <path_to_monkey.py>” . It will save screenshot of UI of AVD.
 
ERROR:-
 
Error 1:
Unable to copy Android Studio in /opt/ folder due to lack of permission
 
Solution:
 Copy Android Studio folder .Open Terminal and type “sudo apt install gksu”  and then “gksudo nautilus”  .It allows you as superuser .A window will occur choose  destination folder for  Android Studio and then copy paste it .
 
Error 2:
adb server is out of date. killing… cannot bind 'tcp:5037' ADB server didn't ACK * failed to start daemon* 
When using AVD of Android Studio 
 
Solution : 
update the adb to 1.0.32 if you have 1.0.31 or lower .In Terminal type
 
wget -O - https://skia.googlesource.com/skia/+archive/cd048d18e0b81338c1a04b9749a00444597df394/platform_tools/android/bin/linux.tar.gz | tar -zxvf - adb
 sudo mv adb /usr/bin/adb 
sudo chmod +x /usr/bin/adb 
adb version
 Android Debug Bridge version 1.0.32
 
 
WARNING:-
 
Don’t use Genymotion  android virtual device for emulator  it will cause an error of 
“adb server is out of date.  killing...
cannot bind 'tcp:5037'
ADB server didn't ACK
* failed to start daemon *
error: ”
 
